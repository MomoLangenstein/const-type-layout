var searchIndex = new Map(JSON.parse('[\
["const_type_layout",{"doc":"CI Status MSRV Latest Version Rust Doc Crate Rust Doc Main …","t":"GRPKFPPPPPPRPGPPTTKKYFFGPPPPPPPPFONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNONNNNNNNNNNNNNNNNNNNNNCNNNNNNNOOONNNONNNNNNNNHNHNNNNNNNOONNNNNNNNNNNNNNNNNNNNNOONNNNNNNCOOOOOOOFGQQNNNNNNNNNNNNNNKRQ","n":["Discriminant","Discriminant","Enum","ExtractDiscriminant","Field","I128","I16","I32","I64","I8","Inhabited","Inhabited","Isize","MaybeUninhabited","Primitive","Struct","TYPE_GRAPH","TYPE_LAYOUT","TypeGraphLayout","TypeLayout","TypeLayout","TypeLayoutGraph","TypeLayoutInfo","TypeStructure","U128","U16","U32","U64","U8","Uninhabited","Union","Usize","Variant","alignment","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","discriminant","eq","eq","eq","eq","eq","eq","eq","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","inhabited","into","into","into","into","into","into","into","name","name","name","new","new","new","offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","serialise","serialise_type_graph","serialised_len","serialised_type_graph_len","serialize","serialize","serialize","serialize","serialize","serialize","serialize","size","structure","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","typeset","tys","fields","fields","repr","repr","repr","variants","Inhabited","Uninhabited","all","any","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","ComputeTypeSet","Output","tset"],"q":[[0,"const_type_layout"],[174,"const_type_layout::TypeStructure"],[180,"const_type_layout::inhabited"],[198,"const_type_layout::typeset"],[201,"core::clone"],[202,"core::ops::deref"],[203,"core::cmp"],[204,"core::cmp"],[205,"core::result"],[206,"serde::de"],[207,"serde::de"],[208,"core::fmt"],[209,"core::hash"],[210,"core::option"],[211,"core::cmp"],[212,"serde::ser"]],"d":["Discriminant value of a type.","The type of the discriminant, which must satisfy the trait …","An enum type.","Helper trait to extract the …","Descriptor of the shallow layout of a field.","<code>#[repr(i128)]</code> discriminant.","<code>#[repr(i16)]</code> discriminant.","<code>#[repr(i32)]</code> discriminant.","<code>#[repr(i64)]</code> discriminant.","<code>#[repr(i8)]</code> discriminant.","The type is inhabited, some value of type <code>T</code>.","Marker type for whether the type is inhabited or …","<code>#[repr(isize)]</code> discriminant (default).","Optional value that exists if some other type is inhabited.","A primitive type, e.g. <code>()</code>, <code>u8</code>, <code>*const i32</code>, <code>&amp;mut bool</code>, …","A struct-like type, including unit structs, tuple structs, …","Shallow layout of the type.","Shallow layout of the type.","Utility trait that provides the deep layout of a type.","Utility trait that provides the shallow layout of a type.","Provides the <code>#[derive(TypeLayout)]</code> implementation for the …","Description of the deep layout of a type.","Description of the shallow layout of a type.","Description of the shallow structure of a type.","<code>#[repr(u128)]</code> discriminant.","<code>#[repr(u16)]</code> discriminant.","<code>#[repr(u32)]</code> discriminant.","<code>#[repr(u64)]</code> discriminant.","<code>#[repr(u8)]</code> discriminant.","The type is uninhabited, no value.","A union type.","<code>#[repr(usize)]</code> discriminant.","Description of the shallow layout of a variant","The type’s minimum alignment.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The variant’s descriminant, iff the variant is inhabited.","","","","","","","","The variant’s fields.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Helper module to compute whether a combination of types …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The type’s fully-qualified name.","The variant’s name.","The field’s name.","Construct <code>MaybeUninhabited::Inhabited</code> iff …","Construct the deep type layout descriptor for a type <code>T</code>.","Constructs a <code>Discriminant</code> value with the given value <code>v</code> of …","The field’s byte offset, iff the field is inhabited.","","","","","","","","Serialise this <code>TypeLayoutGraph</code> into the mutable byte slice.","Serialise this type’s <code>TypeLayoutGraph</code> into an array of …","Compute the number of bytes that this <code>TypeLayoutGraph</code> …","Compute the number of bytes that this type’s …","","","","","","","","The type’s size.","The type’s shallow structure.","","","","","","","","","","","","","","","","","","","","","","The type’s fully-qualified name.","The fully-qualified name of the field’s type. This is …","","","","","","","","Helper module to compute the set of types that a type …","The list of types that make up the complete graph …","The fields of the struct.","The fields of the union.","The string representation of the type’s <code>#[repr(...)]</code> …","The string representation of the type’s <code>#[repr(...)]</code> …","The string representation of the type’s <code>#[repr(...)]</code> …","The variants of the union.","Marker type used to specify that a type implementing …","Marker type used to specify that a type implementing …","Helper macro to compute whether all of a list of types, …","Helper macro to compute whether any of a list of types, …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Computes the set of types that a type links to.","Extend the set <code>T</code> into a (larger) set containing also the …","Helper macro to expand a list of types, e.g. <code>H, R1, R2</code>, …"],"i":[0,35,10,0,0,11,11,11,11,11,1,36,11,0,10,10,37,36,0,0,0,0,0,0,11,11,11,11,11,1,10,11,0,9,1,3,9,10,8,11,5,1,3,9,10,8,11,5,1,3,9,10,8,11,5,1,3,9,10,8,11,5,1,3,9,10,8,11,5,1,1,3,9,10,8,11,5,8,1,3,9,10,8,11,5,8,1,3,9,10,8,11,5,1,3,9,10,8,11,5,1,3,9,10,8,11,5,0,1,3,9,10,8,11,5,9,8,5,1,3,11,5,1,3,9,10,8,11,5,3,0,3,0,1,3,9,10,8,11,5,9,9,1,3,9,10,8,11,5,1,3,9,10,8,11,5,1,3,9,10,8,11,5,3,5,1,3,9,10,8,11,5,0,3,38,39,38,39,40,40,0,0,0,0,41,42,41,42,41,42,41,42,41,42,41,42,41,42,0,43,0],"f":"``````````````````````````````````{ce{}{}}0000000000000{{{b{c}}}{{b{c}}}d}{{{f{cegi}}}{{f{cegi}}}{d{n{}{{h{{l{j}}}}}}}{d{n{}{{h{{l{{A`{c}}}}}}}}}{d{n{}{{h{{Ab{ce}}}}}}}{d{n{}{{h{{l{g}}}}}}}}{{{Ab{ce}}}{{Ab{ce}}}{d{n{}{{h{{l{j}}}}}}}{d{n{}{{h{{l{{A`{c}}}}}}}}}}{{{Ad{ce}}}{{Ad{ce}}}{d{n{}{{h{{l{j}}}}}}}{d{n{}{{h{{l{{A`{c}}}}}}}}}}{{{A`{c}}}{{A`{c}}}{d{n{}{{h{{l{j}}}}}}}}{AfAf}{jj}{{ce}Ah{}{}}000000{{{b{c}}{b{c}}}AjAl}{{{f{cegi}}{f{cegi}}}Aj{Al{n{}{{h{{l{j}}}}}}}{Al{n{}{{h{{l{{A`{c}}}}}}}}}{Al{n{}{{h{{Ab{ce}}}}}}}{Al{n{}{{h{{l{g}}}}}}}}{{{Ab{ce}}{Ab{ce}}}Aj{Al{n{}{{h{{l{j}}}}}}}{Al{n{}{{h{{l{{A`{c}}}}}}}}}}{{{Ad{ce}}{Ad{ce}}}Aj{Al{n{}{{h{{l{j}}}}}}}{Al{n{}{{h{{l{{A`{c}}}}}}}}}}{{{A`{c}}{A`{c}}}Aj{{n{}{{h{{l{j}}}}}}Al}}{{AfAf}Aj}{{jj}Aj}{{}{{b{c}}}An}{c{{B`{{b{e}}}}}BbBd}{c{{B`{{f{egik}}}}}Bb{Bd{n{}{{h{{l{j}}}}}}}{Bd{n{}{{h{{l{{A`{e}}}}}}}}}{Bd{n{}{{h{{Ab{eg}}}}}}}{Bd{n{}{{h{{l{i}}}}}}}}{c{{B`{{Ab{eg}}}}}Bb{Bd{n{}{{h{{l{j}}}}}}}{Bd{n{}{{h{{l{{A`{e}}}}}}}}}}{c{{B`{{Ad{eg}}}}}Bb{Bd{n{}{{h{{l{j}}}}}}}{Bd{n{}{{h{{l{{A`{e}}}}}}}}}}{c{{B`{{A`{e}}}}}Bb{Bd{n{}{{h{{l{j}}}}}}}}{c{{B`{Af}}}Bb}{c{{B`{j}}}Bb}`{{{b{c}}{b{c}}}BfBh}{{{f{cegi}}{f{cegi}}}Bf{Bh{n{}{{h{{l{j}}}}}}}{Bh{n{}{{h{{l{{A`{c}}}}}}}}}{Bh{n{}{{h{{Ab{ce}}}}}}}{Bh{n{}{{h{{l{g}}}}}}}}{{{Ab{ce}}{Ab{ce}}}Bf{Bh{n{}{{h{{l{j}}}}}}}{Bh{n{}{{h{{l{{A`{c}}}}}}}}}}{{{Ad{ce}}{Ad{ce}}}Bf{Bh{n{}{{h{{l{j}}}}}}}{Bh{n{}{{h{{l{{A`{c}}}}}}}}}}{{{A`{c}}{A`{c}}}Bf{Bh{n{}{{h{{l{j}}}}}}}}{{AfAf}Bf}{{jj}Bf}`{{{b{c}}Bj}BlBn}{{{f{cegi}}Bj}Bl{{n{}{{h{{l{j}}}}}}Bn}{{n{}{{h{{l{{A`{c}}}}}}}}Bn}{{n{}{{h{{Ab{ce}}}}}}Bn}{{n{}{{h{{l{g}}}}}}Bn}}{{{Ab{ce}}Bj}Bl{Bn{n{}{{h{{l{j}}}}}}}{Bn{n{}{{h{{l{{A`{c}}}}}}}}}}{{{Ad{ce}}Bj}Bl{Bn{n{}{{h{{l{j}}}}}}}{Bn{n{}{{h{{l{{A`{c}}}}}}}}}}{{{A`{c}}Bj}Bl{Bn{n{}{{h{{l{j}}}}}}}}{{AfBj}Bl}{{jBj}Bl}{cc{}}000000{{{b{c}}e}AhC`Cb}{{{f{cegi}}k}Ah{C`{n{}{{h{{l{j}}}}}}}{C`{n{}{{h{{l{{A`{c}}}}}}}}}{C`{n{}{{h{{Ab{ce}}}}}}}{C`{n{}{{h{{l{g}}}}}}}Cb}{{{Ab{ce}}g}Ah{C`{n{}{{h{{l{j}}}}}}}{C`{n{}{{h{{l{{A`{c}}}}}}}}}Cb}{{{Ad{ce}}g}Ah{C`{n{}{{h{{l{j}}}}}}}{C`{n{}{{h{{l{{A`{c}}}}}}}}}Cb}{{{A`{c}}e}Ah{C`{n{}{{h{{l{j}}}}}}}Cb}{{Afc}AhCb}{{jc}AhCb}`{ce{}{}}000000```{c{{b{c}}}Cd}{{}f}{{}Af}`{{{b{c}}{b{c}}}{{Cf{Aj}}}Ch}{{{f{cegi}}{f{cegi}}}{{Cf{Aj}}}{Ch{n{}{{h{{l{j}}}}}}}{Ch{n{}{{h{{l{{A`{c}}}}}}}}}{Ch{n{}{{h{{Ab{ce}}}}}}}{Ch{n{}{{h{{l{g}}}}}}}}{{{Ab{ce}}{Ab{ce}}}{{Cf{Aj}}}{Ch{n{}{{h{{l{j}}}}}}}{Ch{n{}{{h{{l{{A`{c}}}}}}}}}}{{{Ad{ce}}{Ad{ce}}}{{Cf{Aj}}}{Ch{n{}{{h{{l{j}}}}}}}{Ch{n{}{{h{{l{{A`{c}}}}}}}}}}{{{A`{c}}{A`{c}}}{{Cf{Aj}}}{{n{}{{h{{l{j}}}}}}Ch}}{{AfAf}{{Cf{Aj}}}}{{jj}{{Cf{Aj}}}}{{f{l{Cj}}}Ah}{{}{{Cl{Cj}}}}{fCn}{{}Cn}{{{b{c}}e}B`D`Db}{{{f{cegi}}k}B`{D`{n{}{{h{{l{j}}}}}}}{D`{n{}{{h{{l{{A`{c}}}}}}}}}{D`{n{}{{h{{Ab{ce}}}}}}}{D`{n{}{{h{{l{g}}}}}}}Db}{{{Ab{ce}}g}B`{D`{n{}{{h{{l{j}}}}}}}{D`{n{}{{h{{l{{A`{c}}}}}}}}}Db}{{{Ad{ce}}g}B`{D`{n{}{{h{{l{j}}}}}}}{D`{n{}{{h{{l{{A`{c}}}}}}}}}Db}{{{A`{c}}e}B`{D`{n{}{{h{{l{j}}}}}}}Db}{{Afc}B`Db}{{jc}B`Db}``{ce{}{}}000000{c{{B`{e}}}{}{}}0000000000000``{cDd{}}000000````````````2222{cc{}}033222211```","c":[],"p":[[6,"MaybeUninhabited",0],[10,"Clone",201],[5,"TypeLayoutGraph",0],[17,"Target"],[5,"Field",0],[1,"slice"],[10,"Deref",202],[5,"Variant",0],[5,"TypeLayoutInfo",0],[6,"TypeStructure",0],[6,"Discriminant",0],[1,"unit"],[6,"Ordering",203],[10,"Ord",203],[10,"Default",204],[6,"Result",205],[10,"Deserializer",206],[10,"Deserialize",206],[1,"bool"],[10,"PartialEq",203],[5,"Formatter",207],[8,"Result",207],[10,"Debug",207],[10,"Hash",208],[10,"Hasher",208],[10,"Copy",209],[6,"Option",210],[10,"PartialOrd",203],[1,"u8"],[1,"array"],[1,"usize"],[10,"Serialize",211],[10,"Serializer",211],[5,"TypeId",212],[10,"ExtractDiscriminant",0],[10,"TypeLayout",0],[10,"TypeGraphLayout",0],[15,"Struct",174],[15,"Union",174],[15,"Enum",174],[5,"Inhabited",180],[6,"Uninhabited",180],[10,"ComputeTypeSet",198]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
